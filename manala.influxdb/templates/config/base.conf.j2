{%- import '_macros.j2' as macros with context -%}

{% set config = manala_influxdb_config -%}

{% set config_meta = [] -%}
{% set config_data = [] -%}
{% set config_database = [] -%}
{% set config_hinted_handoff = [] -%}
{% set config_coordinator = [] -%}
{% set config_retention = [] -%}
{% set config_shard_precreation = [] -%}
{% set config_monitor = [] -%}
{% set config_http = [] -%}
{% set config_logging = [] -%}
{% set config_subscriber = [] -%}
{% set config_graphite = [] -%}
{% set config_collectd = [] -%}
{% set config_opentsdb = [] -%}
{% set config_udp = [] -%}
{% set config_continuous_queries = [] -%}
{% set config_tls = [] -%}

{%- for configs in config -%}
    {%- for config_name, config_parameters in configs.items() -%}
        {%- if config_name == 'meta' -%}
            {%- if config_meta.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'data' -%}
            {%- if config_data.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'database' -%}
            {%- if config_database.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'hinted_handoff' -%}
            {%- if config_hinted_handoff.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'coordinator' -%}
            {%- if config_coordinator.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'retention' -%}
            {%- if config_retention.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'shard_precreation' -%}
            {%- if config_shard_precreation.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'monitor' -%}
            {%- if config_monitor.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'http' -%}
            {%- if config_http.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'logging' -%}
            {%- if config_logging.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'subscriber' -%}
            {%- if config_subscriber.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.graphite' -%}
            {%- if config_graphite.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'collectd' -%}
            {%- if config_collectd.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'udp' -%}
            {%- if config_udp.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'continuous_queries' -%}
            {%- if config_continuous_queries.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'tls' -%}
            {%- if config_tls.extend(config_parameters) -%}{%- endif -%}
        {%- endif -%}
    {%- endfor -%}
{%- endfor -%}
### Welcome to the InfluxDB configuration file.

# The values in this file override the default values used by the system if
# a config option is not specified. The commented out lines are the configuration
# field and the default value used. Uncommenting a line and changing the value
# will change the value used at runtime when the process is restarted.

# Once every 24 hours InfluxDB will report usage data to usage.influxdata.com
# The data includes a random ID, os, arch, version, the number of series and other
# usage data. No data from user databases is ever transmitted.
# Change this option to true to disable reporting.
{{ macros.config_row(config, 'reporting-disabled', '# reporting-disabled = false', 0, true) }}

# Bind address to use for the RPC service for backup and restore.
{{ macros.config_row(config, 'bind-address', '# bind-address = "127.0.0.1:8088"', 0, true) }}

###
### [meta]
###
### Controls the parameters for the Raft consensus group that stores metadata
### about the InfluxDB cluster.
###

[meta]
  # Where the metadata/raft database is stored
  {{ macros.config_row(config_meta, 'dir', '/var/lib/influxdb/meta') }}

  # Automatically create a default retention policy when creating a database.
  {{ macros.config_row(config_meta, 'retention-autocreate', '# retention-autocreate = true', 0, true) }}

  # If log messages are printed for the meta service
  {{ macros.config_row(config_meta, 'logging-enabled', '# logging-enabled = true', 0, true) }}

###
### [data]
###
### Controls where the actual shard data for InfluxDB lives and how it is
### flushed from the WAL. "dir" may need to be changed to a suitable place
### for your system, but the WAL settings are an advanced configuration. The
### defaults should work for most systems.
###

[data]
  # The directory where the TSM storage engine stores TSM files.
  {{ macros.config_row(config_data, 'dir', '/var/lib/influxdb/data') }}

  # The directory where the TSM storage engine stores WAL files.
  {{ macros.config_row(config_data, 'wal-dir', '/var/lib/influxdb/wal') }}

  # The amount of time that a write will wait before fsyncing.  A duration
  # greater than 0 can be used to batch up multiple fsync calls.  This is useful for slower
  # disks or when WAL write contention is seen.  A value of 0s fsyncs every write to the WAL.
  # Values in the range of 0-100ms are recommended for non-SSD disks.
  {{ macros.config_row(config_data, 'wal-fsync-delay', '# wal-fsync-delay = "0s"', 0, true) }}


  # The type of shard index to use for new shards.  The default is an in-memory index that is
  # recreated at startup.  A value of "tsi1" will use a disk based index that supports higher
  # cardinality datasets.
  {{ macros.config_row(config_data, 'index-version', '# index-version = "inmem"', 0, true) }}

  # Trace logging provides more verbose output around the tsm engine. Turning
  # this on can provide more useful output for debugging tsm engine issues.
  {{ macros.config_row(config_data, 'trace-logging-enabled', '# trace-logging-enabled = false', 0, true) }}

  # Whether queries should be logged before execution. Very useful for troubleshooting, but will
  # log any sensitive data contained within a query.
  {{ macros.config_row(config_data, 'query-log-enabled', '# query-log-enabled = true', 0, true) }}

  # Validates incoming writes to ensure keys only have valid unicode characters.
  # This setting will incur a small overhead because every key must be checked.
  {{ macros.config_row(config_data, 'validate-keys', '# validate-keys = false', 0, true) }}

  # Settings for the TSM engine

  # CacheMaxMemorySize is the maximum size a shard's cache can
  # reach before it starts rejecting writes.
  # Valid size suffixes are k, m, or g (case insensitive, 1024 = 1k).
  # Values without a size suffix are in bytes.
  {{ macros.config_row(config_data, 'cache-max-memory-size', '# cache-max-memory-size = "1g"', 0, true) }}

  # CacheSnapshotMemorySize is the size at which the engine will
  # snapshot the cache and write it to a TSM file, freeing up memory
  # Valid size suffixes are k, m, or g (case insensitive, 1024 = 1k).
  # Values without a size suffix are in bytes.
  {{ macros.config_row(config_data, 'cache-snapshot-memory-size', '# cache-snapshot-memory-size = "25m"', 0, true) }}

  # CacheSnapshotWriteColdDuration is the length of time at
  # which the engine will snapshot the cache and write it to
  # a new TSM file if the shard hasn't received writes or deletes
  {{ macros.config_row(config_data, 'cache-snapshot-write-cold-duration', '# cache-snapshot-write-cold-duration = "10m"', 0, true) }}

  # CompactFullWriteColdDuration is the duration at which the engine
  # will compact all TSM files in a shard if it hasn't received a
  # write or delete
  {{ macros.config_row(config_data, 'compact-full-write-cold-duration', '# compact-full-write-cold-duration = "4h"', 0, true) }}

  # The maximum number of concurrent full and level compactions that can run at one time.  A
  # value of 0 results in 50% of runtime.GOMAXPROCS(0) used at runtime.  Any number greater
  # than 0 limits compactions to that value.  This setting does not apply
  # to cache snapshotting.
  {{ macros.config_row(config_data, 'max-concurrent-compactions', '# max-concurrent-compactions = 0', 0, true) }}

  # CompactThroughput is the rate limit in bytes per second that we
  # will allow TSM compactions to write to disk. Note that short bursts are allowed
  # to happen at a possibly larger value, set by CompactThroughputBurst
  {{ macros.config_row(config_data, 'compact-throughput', '# compact-throughput = "48m"', 0, true) }}

  # CompactThroughputBurst is the rate limit in bytes per second that we
  # will allow TSM compactions to write to disk.
  {{ macros.config_row(config_data, 'compact-throughput-burst', '# compact-throughput-burst = "48m"', 0, true) }}

  # If true, then the mmap advise value MADV_WILLNEED will be provided to the kernel with respect to
  # TSM files. This setting has been found to be problematic on some kernels, and defaults to off.
  # It might help users who have slow disks in some cases.
  {{ macros.config_row(config_data, 'tsm-use-madv-willneed', '# tsm-use-madv-willneed = false', 0, true) }}

  # Settings for the inmem index

  # The maximum series allowed per database before writes are dropped.  This limit can prevent
  # high cardinality issues at the database level.  This limit can be disabled by setting it to
  # 0.
  {{ macros.config_row(config_data, 'max-series-per-database', '# max-series-per-database = 1000000', 0, true) }}

  # The maximum number of tag values per tag that are allowed before writes are dropped.  This limit
  # can prevent high cardinality tag values from being written to a measurement.  This limit can be
  # disabled by setting it to 0.
  {{ macros.config_row(config_data, 'max-values-per-tag', '# max-values-per-tag = 100000', 0, true) }}

  # Settings for the tsi1 index

  # The threshold, in bytes, when an index write-ahead log file will compact
  # into an index file. Lower sizes will cause log files to be compacted more
  # quickly and result in lower heap usage at the expense of write throughput.
  # Higher sizes will be compacted less frequently, store more series in-memory,
  # and provide higher write throughput.
  # Valid size suffixes are k, m, or g (case insensitive, 1024 = 1k).
  # Values without a size suffix are in bytes.
  {{ macros.config_row(config_data, 'max-index-log-file-size', '# max-index-log-file-size = "1m"', 0, true) }}

  # The size of the internal cache used in the TSI index to store previously 
  # calculated series results. Cached results will be returned quickly from the cache rather
  # than needing to be recalculated when a subsequent query with a matching tag key/value 
  # predicate is executed. Setting this value to 0 will disable the cache, which may
  # lead to query performance issues.
  # This value should only be increased if it is known that the set of regularly used 
  # tag key/value predicates across all measurements for a database is larger than 100. An
  # increase in cache size may lead to an increase in heap usage.
  {{ macros.config_row(config_data, 'series-id-set-cache-size', 100) }}

###
### [coordinator]
###
### Controls the clustering service configuration.
###

[coordinator]
  # The default time a write request will wait until a "timeout" error is returned to the caller.
  {{ macros.config_row(config_coordinator, 'write-timeout', '# write-timeout = "10s"', 0, true) }}

  # The maximum number of concurrent queries allowed to be executing at one time.  If a query is
  # executed and exceeds this limit, an error is returned to the caller.  This limit can be disabled
  # by setting it to 0.
  {{ macros.config_row(config_coordinator, 'max-concurrent-queries', '# max-concurrent-queries = 0', 0, true) }}

  # The maximum time a query will is allowed to execute before being killed by the system.  This limit
  # can help prevent run away queries.  Setting the value to 0 disables the limit.
  {{ macros.config_row(config_coordinator, 'query-timeout', '# query-timeout = "0s"', 0, true) }}

  # The time threshold when a query will be logged as a slow query.  This limit can be set to help
  # discover slow or resource intensive queries.  Setting the value to 0 disables the slow query logging.
  {{ macros.config_row(config_coordinator, 'log-queries-after', '# log-queries-after = "0s"', 0, true) }}

  # The maximum number of points a SELECT can process.  A value of 0 will make
  # the maximum point count unlimited.  This will only be checked every second so queries will not
  # be aborted immediately when hitting the limit.
  {{ macros.config_row(config_coordinator, 'max-select-point', '# max-select-point = 0', 0, true) }}

  # The maximum number of series a SELECT can run.  A value of 0 will make the maximum series
  # count unlimited.
  {{ macros.config_row(config_coordinator, 'max-select-series', '# max-select-series = 0', 0, true) }}

  # The maximum number of group by time bucket a SELECT can create.  A value of zero will max the maximum
  # number of buckets unlimited.
  {{ macros.config_row(config_coordinator, 'max-select-buckets', '# max-select-buckets = 0', 0, true) }}

###
### [retention]
###
### Controls the enforcement of retention policies for evicting old data.
###

[retention]
  # Determines whether retention policy enforcement enabled.
  {{ macros.config_row(config_retention, 'enabled', '# enabled = true', 0, true) }}

  # The interval of time when retention policy enforcement checks run.
  {{ macros.config_row(config_retention, 'check-interval', '# check-interval = "30m"', 0, true) }}

###
### [shard-precreation]
###
### Controls the precreation of shards, so they are available before data arrives.
### Only shards that, after creation, will have both a start- and end-time in the
### future, will ever be created. Shards are never precreated that would be wholly
### or partially in the past.

[shard-precreation]
  # Determines whether shard pre-creation service is enabled.
  {{ macros.config_row(config_shard_precreation, 'enabled', '# enabled = true', 0, true) }}

  # The interval of time when the check to pre-create new shards runs.
  {{ macros.config_row(config_shard_precreation, 'check-interval', '# check-interval = "10m"', 0, true) }}

  # The default period ahead of the endtime of a shard group that its successor
  # group is created.
  {{ macros.config_row(config_shard_precreation, 'advance-period', '# advance-period = "30m"', 0, true) }}

###
### Controls the system self-monitoring, statistics and diagnostics.
###
### The internal database for monitoring data is created automatically if
### if it does not already exist. The target retention within this database
### is called 'monitor' and is also created with a retention period of 7 days
### and a replication factor of 1, if it does not exist. In all cases the
### this retention policy is configured as the default for the database.

[monitor]
  # Whether to record statistics internally.
  {{ macros.config_row(config_monitor, 'store-enabled', '# store-enabled = true', 0, true) }}

  # The destination database for recorded statistics
  {{ macros.config_row(config_monitor, 'store-database', '# store-database = "_internal"', 0, true) }}

  # The interval at which to record statistics
  {{ macros.config_row(config_monitor, 'store-interval', '# store-interval = "10s"', 0, true) }}

###
### [http]
###
### Controls how the HTTP endpoints are configured. These are the primary
### mechanism for getting data into and out of InfluxDB.
###

[http]
  # Determines whether HTTP endpoint is enabled.
  {{ macros.config_row(config_http, 'enabled', '# enabled = true', 0, true) }}

  # Determines whether the Flux query endpoint is enabled.
  {{ macros.config_row(config_http, 'flux-enabled', '# flux-enabled = false', 0, true) }}

  # Determines whether the Flux query logging is enabled.
  {{ macros.config_row(config_http, 'flux-log-enabled', '# flux-log-enabled = false', 0, true) }}

  # The bind address used by the HTTP service.
  {{ macros.config_row(config_http, 'bind-address', '# bind-address = ":8086"', 0, true) }}

  # Determines whether user authentication is enabled over HTTP/HTTPS.
  {{ macros.config_row(config_http, 'auth-enabled', '# auth-enabled = false', 0, true) }}

  # The default realm sent back when issuing a basic auth challenge.
  {{ macros.config_row(config_http, 'realm', '# realm = "InfluxDB"', 0, true) }}

  # Determines whether HTTP request logging is enabled.
  {{ macros.config_row(config_http, 'log-enabled', '# log-enabled = true', 0, true) }}

  # Determines whether the HTTP write request logs should be suppressed when the log is enabled.
  {{ macros.config_row(config_http, 'suppress-write-log', '# suppress-write-log = false', 0, true) }}

  # When HTTP request logging is enabled, this option specifies the path where
  # log entries should be written. If unspecified, the default is to write to stderr, which
  # intermingles HTTP logs with internal InfluxDB logging.
  #
  # If influxd is unable to access the specified path, it will log an error and fall back to writing
  # the request log to stderr.
  {{ macros.config_row(config_http, 'access-log-path', '# access-log-path = ""', 0, true) }}

  # Filters which requests should be logged. Each filter is of the pattern NNN, NNX, or NXX where N is
  # a number and X is a wildcard for any number. To filter all 5xx responses, use the string 5xx.
  # If multiple filters are used, then only one has to match. The default is to have no filters which
  # will cause every request to be printed.
  {{ macros.config_row(config_http, 'access-log-status-filters', '# access-log-status-filters = []', 0, true) }}

  # Determines whether detailed write logging is enabled.
  {{ macros.config_row(config_http, 'write-tracing', '# write-tracing = false', 0, true) }}

  # Determines whether the pprof endpoint is enabled.  This endpoint is used for
  # troubleshooting and monitoring.
  {{ macros.config_row(config_http, 'pprof-enabled', '# pprof-enabled = true', 0, true) }}

  # Enables a pprof endpoint that binds to localhost:6060 immediately on startup.
  # This is only needed to debug startup issues.
  {{ macros.config_row(config_http, 'debug-pprof-enabled', '# debug-pprof-enabled = false', 0, true) }}

  # Determines whether HTTPS is enabled.
  {{ macros.config_row(config_http, 'https-enabled', '# https-enabled = false', 0, true) }}

  # The SSL certificate to use when HTTPS is enabled.
  {{ macros.config_row(config_http, 'https-certificate', '# https-certificate = "/etc/ssl/influxdb.pem"', 0, true) }}

  # Use a separate private key location.
  {{ macros.config_row(config_http, 'https-private-key', '# https-private-key = ""', 0, true) }}

  # The JWT auth shared secret to validate requests using JSON web tokens.
  {{ macros.config_row(config_http, 'shared-secret', '# shared-secret = ""', 0, true) }}

  # The default chunk size for result sets that should be chunked.
  {{ macros.config_row(config_http, 'max-row-limit', '# max-row-limit = 0', 0, true) }}

  # The maximum number of HTTP connections that may be open at once.  New connections that
  # would exceed this limit are dropped.  Setting this value to 0 disables the limit.
  {{ macros.config_row(config_http, 'max-connection-limit', '# max-connection-limit = 0', 0, true) }}

  # Enable http service over unix domain socket
  {{ macros.config_row(config_http, 'unix-socket-enabled', '# unix-socket-enabled = false', 0, true) }}

  # The path of the unix domain socket.
  {{ macros.config_row(config_http, 'bind-socket', '# bind-socket = "/var/run/influxdb.sock"', 0, true) }}

  # The maximum size of a client request body, in bytes. Setting this value to 0 disables the limit.
  {{ macros.config_row(config_http, 'max-body-size', '# max-body-size = 25000000', 0, true) }}

  # The maximum number of writes processed concurrently.
  # Setting this to 0 disables the limit.
  {{ macros.config_row(config_http, 'max-concurrent-write-limit', '# max-concurrent-write-limit = 0', 0, true) }}

  # The maximum number of writes queued for processing.
  # Setting this to 0 disables the limit.
  {{ macros.config_row(config_http, 'max-enqueued-write-limit', '# max-enqueued-write-limit = 0', 0, true) }}

  # The maximum duration for a write to wait in the queue to be processed.
  # Setting this to 0 or setting max-concurrent-write-limit to 0 disables the limit.
  {{ macros.config_row(config_http, 'enqueued-write-timeout', '# enqueued-write-timeout = 0', 0, true) }}

###
### [logging]
###
### Controls how the logger emits logs to the output.
###

[logging]
  # Determines which log encoder to use for logs. Available options
  # are auto, logfmt, and json. auto will use a more a more user-friendly
  # output format if the output terminal is a TTY, but the format is not as
  # easily machine-readable. When the output is a non-TTY, auto will use
  # logfmt.
  {{ macros.config_row(config_logging, 'format', '# format = "auto"', 0, true) }}

  # Determines which level of logs will be emitted. The available levels
  # are error, warn, info, and debug. Logs that are equal to or above the
  # specified level will be emitted.
  {{ macros.config_row(config_logging, 'level', '# level = "info"', 0, true) }}

  # Suppresses the logo output that is printed when the program is started.
  # The logo is always suppressed if STDOUT is not a TTY.
  {{ macros.config_row(config_logging, 'suppress-logo', '# suppress-logo = false', 0, true) }}

###
### [subscriber]
###
### Controls the subscriptions, which can be used to fork a copy of all data
### received by the InfluxDB host.
###

[subscriber]
  # Determines whether the subscriber service is enabled.
  {{ macros.config_row(config_subscriber, 'enabled', '# enabled = true', 0, true) }}

  # The default timeout for HTTP writes to subscribers.
  {{ macros.config_row(config_subscriber, 'http-timeout', '# http-timeout = "30s"', 0, true) }}

  # Allows insecure HTTPS connections to subscribers.  This is useful when testing with self-
  # signed certificates.
  {{ macros.config_row(config_subscriber, 'insecure-skip-verify', '# insecure-skip-verify = false', 0, true) }}

  # The path to the PEM encoded CA certs file. If the empty string, the default system certs will be used
  {{ macros.config_row(config_subscriber, 'ca-certs', '# ca-certs = ""', 0, true) }}

  # The number of writer goroutines processing the write channel.
  {{ macros.config_row(config_subscriber, 'write-concurrency', '# write-concurrency = 40', 0, true) }}

  # The number of in-flight writes buffered in the write channel.
  {{ macros.config_row(config_subscriber, 'write-buffer-size', '# write-buffer-size = 1000', 0, true) }}


###
### [[graphite]]
###
### Controls one or many listeners for Graphite data.
###

[[graphite]]
  # Determines whether the graphite endpoint is enabled.
  {{ macros.config_row(config_graphite, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_graphite, 'database', '# database = "graphite"', 0, true) }}
  {{ macros.config_row(config_graphite, 'retention-policy', '# retention-policy = ""', 0, true) }}
  {{ macros.config_row(config_graphite, 'bind-address', '# bind-address = ":2003"', 0, true) }}
  {{ macros.config_row(config_graphite, 'protocol', '# protocol = "tcp"', 0, true) }}
  {{ macros.config_row(config_graphite, 'consistency-level', '# consistency-level = "one"', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Batching
  # will buffer points in memory if you have many coming in.

  # Flush if this many points get buffered
  {{ macros.config_row(config_graphite, 'batch-size', '# batch-size = 5000', 0, true) }}

  # number of batches that may be pending in memory
  {{ macros.config_row(config_graphite, 'batch-pending', '# batch-pending = 10', 0, true) }}

  # Flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_graphite, 'batch-timeout', '# batch-timeout = "1s"', 0, true) }}

  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.
  {{ macros.config_row(config_graphite, 'udp-read-buffer', '# udp-read-buffer = 0', 0, true) }}

  ### This string joins multiple matching 'measurement' values providing more control over the final measurement name.
  {{ macros.config_row(config_graphite, 'separator', '# separator = "."', 0, true) }}

  ### Default tags that will be added to all metrics.  These can be overridden at the template level
  ### or by tags extracted from metric
  {{ macros.config_row(config_graphite, 'tags', '# tags = ["region=us-east", "zone=1c"]', 0, true) }}

  ### Each template line requires a template pattern.  It can have an optional
  ### filter before the template and separated by spaces.  It can also have optional extra
  ### tags following the template.  Multiple tags should be separated by commas and no spaces
  ### similar to the line protocol format.  There can be only one default template.
  {{ macros.config_row(config_graphite, 'templates', '# templates = [
  #   "*.app env.service.resource.measurement",
  #   # Default template
  #   "server.*",
  # ]', 0, true) }}

###
### [collectd]
###
### Controls one or many listeners for collectd data.
###

[[collectd]]
  {{ macros.config_row(config_collectd, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_collectd, 'bind-address', '# bind-address = ":25826"', 0, true) }}
  {{ macros.config_row(config_collectd, 'database', '# database = "collectd"', 0, true) }}
  {{ macros.config_row(config_collectd, 'retention-policy', '# retention-policy = ""', 0, true) }}
  #
  # The collectd service supports either scanning a directory for multiple types
  # db files, or specifying a single db file.
  {{ macros.config_row(config_collectd, 'typesdb', '# typesdb = "/usr/local/share/collectd"', 0, true) }}
  #
  {{ macros.config_row(config_collectd, 'security-level', '# security-level = "none"', 0, true) }}
  {{ macros.config_row(config_collectd, 'auth-file', '# auth-file = "/etc/collectd/auth_file"', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Batching
  # will buffer points in memory if you have many coming in.

  # Flush if this many points get buffered
  {{ macros.config_row(config_collectd, 'batch-size', '# batch-size = 5000', 0, true) }}

  # Number of batches that may be pending in memory
  {{ macros.config_row(config_collectd, 'batch-pending', '# batch-pending = 10', 0, true) }}

  # Flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_collectd, 'batch-timeout', '# batch-timeout = "10s"', 0, true) }}

  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.
  {{ macros.config_row(config_collectd, 'read-buffer', '# read-buffer = 0', 0, true) }}

  # Multi-value plugins can be handled two ways.
  # "split" will parse and store the multi-value plugin data into separate measurements
  # "join" will parse and store the multi-value plugin as a single multi-value measurement.
  # "split" is the default behavior for backward compatibility with previous versions of influxdb.
  {{ macros.config_row(config_collectd, 'parse-multivalue-plugin', '# parse-multivalue-plugin = "split"', 0, true) }}
###
### [opentsdb]
###
### Controls one or many listeners for OpenTSDB data.
###

[[opentsdb]]
  {{ macros.config_row(config_opentsdb, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'bind-address', '# bind-address = ":4242"', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'database', '# database = "opentsdb"', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'retention-policy', '# retention-policy = ""', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'consistency-level', '# consistency-level = "one"', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'tls-enabled', '# tls-enabled = false', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'certificate', '# certificate= "/etc/ssl/influxdb.pem"', 0, true) }}

  # Log an error for every malformed point.
  {{ macros.config_row(config_opentsdb, 'log-point-errors', '# log-point-errors = true', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Only points
  # metrics received over the telnet protocol undergo batching.

  # Flush if this many points get buffered
  {{ macros.config_row(config_opentsdb, 'batch-size', '# batch-size = 1000', 0, true) }}

  # Number of batches that may be pending in memory
  {{ macros.config_row(config_opentsdb, 'batch-pending', '# batch-pending = 5', 0, true) }}

  # Flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_opentsdb, 'batch-timeout', '# batch-timeout = "1s"', 0, true) }}

###
### [[udp]]
###
### Controls the listeners for InfluxDB line protocol data via UDP.
###

[[udp]]
  {{ macros.config_row(config_udp, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_udp, 'bind-address', '# bind-address = ":8089"', 0, true) }}
  {{ macros.config_row(config_udp, 'database', '# database = "udp"', 0, true) }}
  {{ macros.config_row(config_udp, 'retention-policy', '# retention-policy = ""', 0, true) }}

  # InfluxDB precision for timestamps on received points ("" or "n", "u", "ms", "s", "m", "h")
  {{ macros.config_row(config_udp, 'precision', '# precision = ""', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Batching
  # will buffer points in memory if you have many coming in.

  # Flush if this many points get buffered
  {{ macros.config_row(config_udp, 'batch-size', '# batch-size = 5000', 0, true) }}

  # Number of batches that may be pending in memory
  {{ macros.config_row(config_udp, 'batch-pending', '# batch-pending = 10', 0, true) }}

  # Will flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_udp, 'batch-timeout', '# batch-timeout = "1s"', 0, true) }}

  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.
  {{ macros.config_row(config_udp, 'read-buffer', '# read-buffer = 0', 0, true) }}

###
### [continuous_queries]
###
### Controls how continuous queries are run within InfluxDB.
###

[continuous_queries]
  # Determines whether the continuous query service is enabled.
  {{ macros.config_row(config_continuous_queries, 'enabled', '# enabled = true', 0, true) }}

  # Controls whether queries are logged when executed by the CQ service.
  {{ macros.config_row(config_continuous_queries, 'log-enabled', '# log-enabled = true', 0, true) }}

  # Controls whether queries are logged to the self-monitoring data store.
  {{ macros.config_row(config_continuous_queries, 'query-stats-enabled', '# query-stats-enabled = false', 0, true) }}

  # interval for how often continuous queries will be checked if they need to run
  {{ macros.config_row(config_continuous_queries, 'run-interval', '# run-interval = "1s"', 0, true) }}

###
### [tls]
###
### Global configuration settings for TLS in InfluxDB.
###

[tls]
  # Determines the available set of cipher suites. See https://golang.org/pkg/crypto/tls/#pkg-constants
  # for a list of available ciphers, which depends on the version of Go (use the query
  # SHOW DIAGNOSTICS to see the version of Go used to build InfluxDB). If not specified, uses
  # the default settings from Go's crypto/tls package.
  {{ macros.config_row(config_tls, 'ciphers', '# ciphers = [
  #   "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305",
  #   "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
  # ]', 0, true) }}

  # Minimum version of the tls protocol that will be negotiated. If not specified, uses the
  # default settings from Go's crypto/tls package.
  {{ macros.config_row(config_tls, 'min-version', '# min-version = "tls1.2"', 0, true) }}

  # Maximum version of the tls protocol that will be negotiated. If not specified, uses the
  # default settings from Go's crypto/tls package.
  {{ macros.config_row(config_tls, 'max-version', '# max-version = "tls1.2"', 0, true) }}
