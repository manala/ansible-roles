{%- import '_macros.j2' as macros with context -%}

{% set config = manala_ansible_config -%}

{% set config_defaults = [] -%}
{% set config_inventory = [] -%}
{% set config_privilege_escalation = [] -%}
{% set config_paramiko_connection = [] -%}
{% set config_ssh_connection = [] -%}
{% set config_persistent_connection = [] -%}
{% set config_accelerate = [] -%}
{% set config_selinux = [] -%}
{% set config_colors = [] -%}
{% set config_diff = [] -%}

{%- for configs in config -%}
    {%- for config_name, config_parameters in configs.items() -%}
        {%- if config_name == 'defaults' -%}
            {%- if config_defaults.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'inventory' -%}
            {%- if config_inventory.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'privilege_escalation' -%}
            {%- if config_privilege_escalation.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'paramiko_connection' -%}
            {%- if config_paramiko_connection.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'ssh_connection' -%}
            {%- if config_ssh_connection.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'persistent_connection' -%}
            {%- if config_persistent_connection.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'accelerate' -%}
            {%- if config_accelerate.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'selinux' -%}
            {%- if config_selinux.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'colors' -%}
            {%- if config_colors.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'diff' -%}
            {%- if config_diff.extend(config_parameters) -%}{%- endif -%}
        {%- endif -%}
    {%- endfor -%}
{%- endfor -%}

# config file for ansible -- https://ansible.com/
# ===============================================

# nearly all parameters can be overridden in ansible-playbook
# or with command line flags. ansible will read ANSIBLE_CONFIG,
# ansible.cfg in the current working directory, .ansible.cfg in
# the home directory or /etc/ansible/ansible.cfg, whichever it
# finds first

[defaults]

# some basic default values...

{{ macros.config_row(config_defaults, 'inventory', '#inventory      = /etc/ansible/hosts', 0, true) }}
{{ macros.config_row(config_defaults, 'library', '#library        = /usr/share/my_modules/', 0, true) }}
{{ macros.config_row(config_defaults, 'module_utils', '#module_utils   = /usr/share/my_module_utils/', 0, true) }}
{{ macros.config_row(config_defaults, 'remote_tmp', '#remote_tmp     = ~/.ansible/tmp', 0, true) }}
{{ macros.config_row(config_defaults, 'local_tmp', '#local_tmp      = ~/.ansible/tmp', 0, true) }}
{{ macros.config_row(config_defaults, 'plugin_filters_cfg', '#plugin_filters_cfg = /etc/ansible/plugin_filters.yml', 0, true) }}
{{ macros.config_row(config_defaults, 'forks', '#forks          = 5', 0, true) }}
{{ macros.config_row(config_defaults, 'poll_interval', '#poll_interval  = 15', 0, true) }}
{{ macros.config_row(config_defaults, 'sudo_user', '#sudo_user      = root', 0, true) }}
{{ macros.config_row(config_defaults, 'ask_sudo_pass', '#ask_sudo_pass = True', 0, true) }}
{{ macros.config_row(config_defaults, 'ask_pass', '#ask_pass      = True', 0, true) }}
{{ macros.config_row(config_defaults, 'transport', '#transport      = smart', 0, true) }}
{{ macros.config_row(config_defaults, 'remote_port', '#remote_port    = 22', 0, true) }}
{{ macros.config_row(config_defaults, 'module_lang', '#module_lang    = C', 0, true) }}
{{ macros.config_row(config_defaults, 'module_set_locale', '#module_set_locale = False', 0, true) }}

# plays will gather facts by default, which contain information about
# the remote system.
#
# smart - gather by default, but don't regather if already gathered
# implicit - gather by default, turn off with gather_facts: False
# explicit - do not gather by default, must say gather_facts: True
{{ macros.config_row(config_defaults, 'gathering', '#gathering = implicit', 0, true) }}

# This only affects the gathering done by a play's gather_facts directive,
# by default gathering retrieves all facts subsets
# all - gather all subsets
# network - gather min and network facts
# hardware - gather hardware facts (longest facts to retrieve)
# virtual - gather min and virtual facts
# facter - import facts from facter
# ohai - import facts from ohai
# You can combine them using comma (ex: network,virtual)
# You can negate them using ! (ex: !hardware,!facter,!ohai)
# A minimal set of facts is always gathered.
{{ macros.config_row(config_defaults, 'gather_subset', '#gather_subset = all', 0, true) }}

# some hardware related facts are collected
# with a maximum timeout of 10 seconds. This
# option lets you increase or decrease that
# timeout to something more suitable for the
# environment.
{{ macros.config_row(config_defaults, 'gather_timeout', '# gather_timeout = 10', 0, true) }}

# additional paths to search for roles in, colon separated
{{ macros.config_row(config_defaults, 'roles_path', '#roles_path    = /etc/ansible/roles', 0, true) }}

# uncomment this to disable SSH key host checking
{{ macros.config_row(config_defaults, 'host_key_checking', '#host_key_checking = False', 0, true) }}

# change the default callback, you can only have one 'stdout' type  enabled at a time.
{{ macros.config_row(config_defaults, 'stdout_callback', '#stdout_callback = skippy', 0, true) }}


## Ansible ships with some plugins that require whitelisting,
## this is done to avoid running all of a type by default.
## These setting lists those that you want enabled for your system.
## Custom plugins should not need this unless plugin author specifies it.

# enable callback plugins, they can output to stdout but cannot be 'stdout' type.
{{ macros.config_row(config_defaults, 'callback_whitelist', '#callback_whitelist = timer, mail', 0, true) }}

# Determine whether includes in tasks and handlers are "static" by
# default. As of 2.0, includes are dynamic by default. Setting these
# values to True will make includes behave more like they did in the
# 1.x versions.
{{ macros.config_row(config_defaults, 'task_includes_static', '#task_includes_static = False', 0, true) }}
{{ macros.config_row(config_defaults, 'handler_includes_static', '#handler_includes_static = False', 0, true) }}

# Controls if a missing handler for a notification event is an error or a warning
{{ macros.config_row(config_defaults, 'error_on_missing_handler', '#error_on_missing_handler = True', 0, true) }}

# change this for alternative sudo implementations
{{ macros.config_row(config_defaults, 'sudo_exe', '#sudo_exe = sudo', 0, true) }}

# What flags to pass to sudo
# WARNING: leaving out the defaults might create unexpected behaviours
{{ macros.config_row(config_defaults, 'sudo_flags', '#sudo_flags = -H -S -n', 0, true) }}

# SSH timeout
{{ macros.config_row(config_defaults, 'timeout', '#timeout = 10', 0, true) }}

# default user to use for playbooks if user is not specified
# (/usr/bin/ansible will use current user as default)
{{ macros.config_row(config_defaults, 'remote_user', '#remote_user = root', 0, true) }}

# logging is off by default unless this path is defined
# if so defined, consider logrotate
{{ macros.config_row(config_defaults, 'log_path', '#log_path = /var/log/ansible.log', 0, true) }}

# default module name for /usr/bin/ansible
{{ macros.config_row(config_defaults, 'module_name', '#module_name = command', 0, true) }}

# use this shell for commands executed under sudo
# you may need to change this to bin/bash in rare instances
# if sudo is constrained
{{ macros.config_row(config_defaults, 'executable', '#executable = /bin/sh', 0, true) }}

# if inventory variables overlap, does the higher precedence one win
# or are hash values merged together?  The default is 'replace' but
# this can also be set to 'merge'.
{{ macros.config_row(config_defaults, 'hash_behaviour', '#hash_behaviour = replace', 0, true) }}

# by default, variables from roles will be visible in the global variable
# scope. To prevent this, the following option can be enabled, and only
# tasks and handlers within the role will see the variables there
{{ macros.config_row(config_defaults, 'private_role_vars', '#private_role_vars = yes', 0, true) }}

# list any Jinja2 extensions to enable here:
{{ macros.config_row(config_defaults, 'jinja2_extensions', '#jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n', 0, true) }}

# if set, always use this private key file for authentication, same as
# if passing --private-key to ansible or ansible-playbook
{{ macros.config_row(config_defaults, 'private_key_file', '#private_key_file = /path/to/file', 0, true) }}

# If set, configures the path to the Vault password file as an alternative to
# specifying --vault-password-file on the command line.
{{ macros.config_row(config_defaults, 'vault_password_file', '#vault_password_file = /path/to/vault_password_file', 0, true) }}

# format of string {{ '{{' }} ansible_managed {{ '}}' }} available within Jinja2
# templates indicates to users editing templates files will be replaced.
# replacing {file}, {host} and {uid} and strftime codes with proper values.
#ansible_managed = Ansible managed: {file} modified on %Y-%m-%d %H:%M:%S by {uid} on {host}
# {file}, {host}, {uid}, and the timestamp can all interfere with idempotence
# in some situations so the default is a static string:
{{ macros.config_row(config_defaults, 'ansible_managed', '#ansible_managed = Ansible managed', 0, true) }}

# by default, ansible-playbook will display "Skipping [host]" if it determines a task
# should not be run on a host.  Set this to "False" if you don't want to see these "Skipping"
# messages. NOTE: the task header will still be shown regardless of whether or not the
# task is skipped.
{{ macros.config_row(config_defaults, 'display_skipped_hosts', '#display_skipped_hosts = True', 0, true) }}

# by default, if a task in a playbook does not include a name: field then
# ansible-playbook will construct a header that includes the task's action but
# not the task's args.  This is a security feature because ansible cannot know
# if the *module* considers an argument to be no_log at the time that the
# header is printed.  If your environment doesn't have a problem securing
# stdout from ansible-playbook (or you have manually specified no_log in your
# playbook on all of the tasks where you have secret information) then you can
# safely set this to True to get more informative messages.
{{ macros.config_row(config_defaults, 'display_args_to_stdout', '#display_args_to_stdout = False', 0, true) }}

# by default (as of 1.3), Ansible will raise errors when attempting to dereference
# Jinja2 variables that are not set in templates or action lines. Uncomment this line
# to revert the behavior to pre-1.3.
{{ macros.config_row(config_defaults, 'error_on_undefined_vars', '#error_on_undefined_vars = False', 0, true) }}

# by default (as of 1.6), Ansible may display warnings based on the configuration of the
# system running ansible itself. This may include warnings about 3rd party packages or
# other conditions that should be resolved if possible.
# to disable these warnings, set the following value to False:
{{ macros.config_row(config_defaults, 'system_warnings', '#system_warnings = True', 0, true) }}

# by default (as of 1.4), Ansible may display deprecation warnings for language
# features that should no longer be used and will be removed in future versions.
# to disable these warnings, set the following value to False:
{{ macros.config_row(config_defaults, 'deprecation_warnings', '#deprecation_warnings = True', 0, true) }}

# (as of 1.8), Ansible can optionally warn when usage of the shell and
# command module appear to be simplified by using a default Ansible module
# instead.  These warnings can be silenced by adjusting the following
# setting or adding warn=yes or warn=no to the end of the command line
# parameter string.  This will for example suggest using the git module
# instead of shelling out to the git command.
{{ macros.config_row(config_defaults, 'command_warnings', '# command_warnings = False', 0, true) }}


# set plugin path directories here, separate with colons
{{ macros.config_row(config_defaults, 'action_plugins', '#action_plugins     = /usr/share/ansible/plugins/action', 0, true) }}
{{ macros.config_row(config_defaults, 'cache_plugins', '#cache_plugins      = /usr/share/ansible/plugins/cache', 0, true) }}
{{ macros.config_row(config_defaults, 'callback_plugins', '#callback_plugins   = /usr/share/ansible/plugins/callback', 0, true) }}
{{ macros.config_row(config_defaults, 'connection_plugins', '#connection_plugins = /usr/share/ansible/plugins/connection', 0, true) }}
{{ macros.config_row(config_defaults, 'lookup_plugins', '#lookup_plugins     = /usr/share/ansible/plugins/lookup', 0, true) }}
{{ macros.config_row(config_defaults, 'inventory_plugins', '#inventory_plugins  = /usr/share/ansible/plugins/inventory', 0, true) }}
{{ macros.config_row(config_defaults, 'vars_plugins', '#vars_plugins       = /usr/share/ansible/plugins/vars', 0, true) }}
{{ macros.config_row(config_defaults, 'filter_plugins', '#filter_plugins     = /usr/share/ansible/plugins/filter', 0, true) }}
{{ macros.config_row(config_defaults, 'test_plugins', '#test_plugins       = /usr/share/ansible/plugins/test', 0, true) }}
{{ macros.config_row(config_defaults, 'terminal_plugins', '#terminal_plugins   = /usr/share/ansible/plugins/terminal', 0, true) }}
{{ macros.config_row(config_defaults, 'strategy_plugins', '#strategy_plugins   = /usr/share/ansible/plugins/strategy', 0, true) }}


# by default, ansible will use the 'linear' strategy but you may want to try
# another one
{{ macros.config_row(config_defaults, 'strategy', '#strategy = free', 0, true) }}

# by default callbacks are not loaded for /bin/ansible, enable this if you
# want, for example, a notification or logging callback to also apply to
# /bin/ansible runs
{{ macros.config_row(config_defaults, 'bin_ansible_callbacks', '#bin_ansible_callbacks = False', 0, true) }}


# don't like cows?  that's unfortunate.
# set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1
{{ macros.config_row(config_defaults, 'nocows', '#nocows = 1', 0, true) }}

# set which cowsay stencil you'd like to use by default. When set to 'random',
# a random stencil will be selected for each task. The selection will be filtered
# against the `cow_whitelist` option below.
#cow_selection = default
{{ macros.config_row(config_defaults, 'cow_selection', '#cow_selection = random', 0, true) }}

# when using the 'random' option for cowsay, stencils will be restricted to this list.
# it should be formatted as a comma-separated list with no spaces between names.
# NOTE: line continuations here are for formatting purposes only, as the INI parser
#       in python does not support them.
{{ macros.config_row(config_defaults, 'cow_whitelist', '#cow_whitelist=bud-frogs,bunny,cheese,daemon,default,dragon,elephant-in-snake,elephant,eyes,\\
#              hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,\\
#              stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader-koala,vader,www', 0, true) }}

# don't like colors either?
# set to 1 if you don't want colors, or export ANSIBLE_NOCOLOR=1
{{ macros.config_row(config_defaults, 'nocolor', '#nocolor = 1', 0, true) }}

# if set to a persistent type (not 'memory', for example 'redis') fact values
# from previous runs in Ansible will be stored.  This may be useful when
# wanting to use, for example, IP information from one group of servers
# without having to talk to them in the same playbook run to get their
# current IP information.
{{ macros.config_row(config_defaults, 'fact_caching', '#fact_caching = memory', 0, true) }}


# retry files
# When a playbook fails by default a .retry file will be created in ~/
# You can disable this feature by setting retry_files_enabled to False
# and you can change the location of the files by setting retry_files_save_path

{{ macros.config_row(config_defaults, 'retry_files_enabled', '#retry_files_enabled = False', 0, true) }}
{{ macros.config_row(config_defaults, 'retry_files_save_path', '#retry_files_save_path = ~/.ansible-retry', 0, true) }}

# squash actions
# Ansible can optimise actions that call modules with list parameters
# when looping. Instead of calling the module once per with_ item, the
# module is called once with all items at once. Currently this only works
# under limited circumstances, and only with parameters named 'name'.
{{ macros.config_row(config_defaults, 'squash_actions', '#squash_actions = apk,apt,dnf,homebrew,pacman,pkgng,yum,zypper', 0, true) }}

# prevents logging of task data, off by default
{{ macros.config_row(config_defaults, 'no_log', '#no_log = False', 0, true) }}

# prevents logging of tasks, but only on the targets, data is still logged on the master/controller
{{ macros.config_row(config_defaults, 'no_target_syslog', '#no_target_syslog = False', 0, true) }}

# controls whether Ansible will raise an error or warning if a task has no
# choice but to create world readable temporary files to execute a module on
# the remote machine.  This option is False by default for security.  Users may
# turn this on to have behaviour more like Ansible prior to 2.1.x.  See
# https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user
# for more secure ways to fix this than enabling this option.
{{ macros.config_row(config_defaults, 'allow_world_readable_tmpfiles', '#allow_world_readable_tmpfiles = False', 0, true) }}

# controls the compression level of variables sent to
# worker processes. At the default of 0, no compression
# is used. This value must be an integer from 0 to 9.
{{ macros.config_row(config_defaults, 'var_compression_level', '#var_compression_level = 9', 0, true) }}

# controls what compression method is used for new-style ansible modules when
# they are sent to the remote system.  The compression types depend on having
# support compiled into both the controller's python and the client's python.
# The names should match with the python Zipfile compression types:
# * ZIP_STORED (no compression. available everywhere)
# * ZIP_DEFLATED (uses zlib, the default)
# These values may be set per host via the ansible_module_compression inventory
# variable
{{ macros.config_row(config_defaults, 'module_compression', '#module_compression = \'ZIP_DEFLATED\'', 0, true) }}

# This controls the cutoff point (in bytes) on --diff for files
# set to 0 for unlimited (RAM may suffer!).
{{ macros.config_row(config_defaults, 'max_diff_size', '#max_diff_size = 1048576', 0, true) }}

# This controls how ansible handles multiple --tags and --skip-tags arguments
# on the CLI.  If this is True then multiple arguments are merged together.  If
# it is False, then the last specified argument is used and the others are ignored.
# This option will be removed in 2.8.
{{ macros.config_row(config_defaults, 'merge_multiple_cli_flags', '#merge_multiple_cli_flags = True', 0, true) }}

# Controls showing custom stats at the end, off by default
{{ macros.config_row(config_defaults, 'show_custom_stats', '#show_custom_stats = True', 0, true) }}

# Controls which files to ignore when using a directory as inventory with
# possibly multiple sources (both static and dynamic)
{{ macros.config_row(config_defaults, 'inventory_ignore_extensions', '#inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo', 0, true) }}

# This family of modules use an alternative execution path optimized for network appliances
# only update this setting if you know how this works, otherwise it can break module execution
{{ macros.config_row(config_defaults, 'network_group_modules', '#network_group_modules=eos, nxos, ios, iosxr, junos, vyos', 0, true) }}

# When enabled, this option allows lookups (via variables like {{ '{{' }}lookup('foo'){{ '}}' }} or when used as
# a loop with `with_foo`) to return data that is not marked "unsafe". This means the data may contain
# jinja2 templating language which will be run through the templating engine.
# ENABLING THIS COULD BE A SECURITY RISK
{{ macros.config_row(config_defaults, 'allow_unsafe_lookups', '#allow_unsafe_lookups = False', 0, true) }}

# set default errors for all plays
{{ macros.config_row(config_defaults, 'any_errors_fatal', '#any_errors_fatal = False', 0, true) }}
{{ macros.config(config_defaults, [
    'inventory',
    'library',
    'module_utils',
    'remote_tmp',
    'local_tmp',
    'forks',
    'plugin_filters_cfg',
    'poll_interval',
    'sudo_user',
    'ask_sudo_pass',
    'ask_pass',
    'transport',
    'remote_port',
    'module_lang',
    'module_set_locale',
    'gathering',
    'gather_subset',
    'gather_timeout',
    'roles_path',
    'host_key_checking',
    'stdout_callback',
    'callback_whitelist',
    'task_includes_static',
    'handler_includes_static',
    'error_on_missing_handler',
    'sudo_exe',
    'sudo_flags',
    'timeout',
    'remote_user',
    'log_path',
    'module_name',
    'executable',
    'hash_behaviour',
    'private_role_vars',
    'jinja2_extensions',
    'private_key_file',
    'vault_password_file',
    'ansible_managed',
    'display_skipped_hosts',
    'display_args_to_stdout',
    'error_on_undefined_vars',
    'system_warnings',
    'deprecation_warnings',
    'command_warnings',
    'action_plugins',
    'cache_plugins',
    'callback_plugins',
    'connection_plugins',
    'lookup_plugins',
    'inventory_plugins',
    'vars_plugins',
    'filter_plugins',
    'test_plugins',
    'terminal_plugins',
    'strategy_plugins',
    'strategy',
    'bin_ansible_callbacks',
    'nocows',
    'cow_selection',
    'cow_whitelist',
    'nocolor',
    'fact_caching',
    'retry_files_enabled',
    'retry_files_save_path',
    'squash_actions',
    'no_log',
    'no_target_syslog',
    'allow_world_readable_tmpfiles',
    'var_compression_level',
    'module_compression',
    'max_diff_size',
    'merge_multiple_cli_flags',
    'show_custom_stats',
    'inventory_ignore_extensions',
    'network_group_modules',
    'allow_unsafe_lookups',
    'any_errors_fatal'
]) }}

[inventory]
# enable inventory plugins, default: 'host_list', 'script', 'yaml', 'ini'
{{ macros.config_row(config_inventory, 'enable_plugins', '#enable_plugins = host_list, virtualbox, yaml, constructed', 0, true) }}

# ignore these extensions when parsing a directory as inventory source
{{ macros.config_row(config_inventory, 'ignore_extensions', '#ignore_extensions = .pyc, .pyo, .swp, .bak, ~, .rpm, .md, .txt, ~, .orig, .ini, .cfg, .retry', 0, true) }}

# ignore files matching these patterns when parsing a directory as inventory source
{{ macros.config_row(config_inventory, 'ignore_patterns', '#ignore_patterns=', 0, true) }}

# If 'true' unparsed inventory sources become fatal errors, they are warnings otherwise.
{{ macros.config_row(config_inventory, 'unparsed_is_failed', '#unparsed_is_failed=False', 0, true) }}
{{ macros.config(config_inventory, [
    'enable_plugins',
    'ignore_extensions',
    'ignore_patterns',
    'unparsed_is_failed'
]) }}

[privilege_escalation]
{{ macros.config_row(config_privilege_escalation, 'become', '#become=True', 0, true) }}
{{ macros.config_row(config_privilege_escalation, 'become_method', '#become_method=sudo', 0, true) }}
{{ macros.config_row(config_privilege_escalation, 'become_user', '#become_user=root', 0, true) }}
{{ macros.config_row(config_privilege_escalation, 'become_ask_pass', '#become_ask_pass=False', 0, true) }}
{{ macros.config(config_privilege_escalation, [
    'become',
    'become_method',
    'become_user',
    'become_ask_pass'
]) }}
[paramiko_connection]

# uncomment this line to cause the paramiko connection plugin to not record new host
# keys encountered.  Increases performance on new host additions.  Setting works independently of the
# host key checking setting above.
{{ macros.config_row(config_paramiko_connection, 'record_host_keys', '#record_host_keys=False', 0, true) }}

# by default, Ansible requests a pseudo-terminal for commands executed under sudo. Uncomment this
# line to disable this behaviour.
{{ macros.config_row(config_paramiko_connection, 'pty', '#pty=False', 0, true) }}

# paramiko will default to looking for SSH keys initially when trying to
# authenticate to remote devices.  This is a problem for some network devices
# that close the connection after a key failure.  Uncomment this line to
# disable the Paramiko look for keys function
{{ macros.config_row(config_paramiko_connection, 'look_for_keys', '#look_for_keys = False', 0, true) }}

# When using persistent connections with Paramiko, the connection runs in a
# background process.  If the host doesn't already have a valid SSH key, by
# default Ansible will prompt to add the host key.  This will cause connections
# running in background processes to fail.  Uncomment this line to have
# Paramiko automatically add host keys.
{{ macros.config_row(config_paramiko_connection, 'host_key_auto_add', '#host_key_auto_add = True', 0, true) }}
{{ macros.config(config_paramiko_connection, [
    'record_host_keys',
    'pty',
    'look_for_keys',
    'host_key_auto_add'
]) }}
[ssh_connection]

# ssh arguments to use
# Leaving off ControlPersist will result in poor performance, so use
# paramiko on older platforms rather than removing it, -C controls compression use
{{ macros.config_row(config_ssh_connection, 'ssh_args', '#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s', 0, true) }}

# The base directory for the ControlPath sockets.
# This is the "%(directory)s" in the control_path option
#
# Example:
# control_path_dir = /tmp/.ansible/cp
{{ macros.config_row(config_ssh_connection, 'control_path_dir', '#control_path_dir = ~/.ansible/cp', 0, true) }}

# The path to use for the ControlPath sockets. This defaults to a hashed string of the hostname,
# port and username (empty string in the config). The hash mitigates a common problem users
# found with long hostames and the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format.
# In those cases, a "too long for Unix domain socket" ssh error would occur.
#
# Example:
# control_path = %(directory)s/%%h-%%r
{{ macros.config_row(config_ssh_connection, 'control_path', '#control_path =', 0, true) }}

# Enabling pipelining reduces the number of SSH operations required to
# execute a module on the remote server. This can result in a significant
# performance improvement when enabled, however when using "sudo:" you must
# first disable 'requiretty' in /etc/sudoers
#
# By default, this option is disabled to preserve compatibility with
# sudoers configurations that have requiretty (the default on many distros).
#
{{ macros.config_row(config_ssh_connection, 'pipelining', '#pipelining = False', 0, true) }}

# Control the mechanism for transferring files (old)
#   * smart = try sftp and then try scp [default]
#   * True = use scp only
#   * False = use sftp only
{{ macros.config_row(config_ssh_connection, 'scp_if_ssh', '#scp_if_ssh = smart', 0, true) }}

# Control the mechanism for transferring files (new)
# If set, this will override the scp_if_ssh option
#   * sftp  = use sftp to transfer files
#   * scp   = use scp to transfer files
#   * piped = use 'dd' over SSH to transfer files
#   * smart = try sftp, scp, and piped, in that order [default]
{{ macros.config_row(config_ssh_connection, 'transfer_method', '#transfer_method = smart', 0, true) }}

# if False, sftp will not use batch mode to transfer files. This may cause some
# types of file transfer failures impossible to catch however, and should
# only be disabled if your sftp version has problems with batch mode
{{ macros.config_row(config_ssh_connection, 'sftp_batch_mode', '#sftp_batch_mode = False', 0, true) }}

# The -tt argument is passed to ssh when pipelining is not enabled because sudo
# requires a tty by default.
{{ macros.config_row(config_ssh_connection, 'use_tty', '#use_tty = True', 0, true) }}

# Number of times to retry an SSH connection to a host, in case of UNREACHABLE.
# For each retry attempt, there is an exponential backoff,
# so after the first attempt there is 1s wait, then 2s, 4s etc. up to 30s (max).
{{ macros.config_row(config_ssh_connection, 'retries', '#retries = 3', 0, true) }}

{{ macros.config(config_ssh_connection, [
    'ssh_args',
    'control_path_dir',
    'control_path',
    'pipelining',
    'scp_if_ssh',
    'transfer_method',
    'sftp_batch_mode',
    'use_tty',
    'retries'
]) }}
[persistent_connection]

# Configures the persistent connection timeout value in seconds.  This value is
# how long the persistent connection will remain idle before it is destroyed.
# If the connection doesn't receive a request before the timeout value
# expires, the connection is shutdown. The default value is 30 seconds.
{{ macros.config_row(config_persistent_connection, 'connect_timeout', '#connect_timeout = 30', 0, true) }}

# Configures the persistent connection retry timeout.  This value configures the
# the retry timeout that ansible-connection will wait to connect
# to the local domain socket. This value must be larger than the
# ssh timeout (timeout) and less than persistent connection idle timeout (connect_timeout).
# The default value is 15 seconds.
{{ macros.config_row(config_persistent_connection, 'connect_retry_timeout', '#connect_retry_timeout = 15', 0, true) }}

# The command timeout value defines the amount of time to wait for a command
# or RPC call before timing out. The value for the command timeout must
# be less than the value of the persistent connection idle timeout (connect_timeout)
# The default value is 10 second.
{{ macros.config_row(config_persistent_connection, 'command_timeout', '#command_timeout = 10', 0, true) }}
{{ macros.config(config_persistent_connection, [
    'connect_timeout',
    'connect_retry_timeout',
    'command_timeout'
]) }}
[accelerate]
{{ macros.config_row(config_accelerate, 'accelerate_port', '#accelerate_port = 5099', 0, true) }}
{{ macros.config_row(config_accelerate, 'accelerate_timeout', '#accelerate_timeout = 30', 0, true) }}
{{ macros.config_row(config_accelerate, 'accelerate_connect_timeout', '#accelerate_connect_timeout = 5.0', 0, true) }}

# The daemon timeout is measured in minutes. This time is measured
# from the last activity to the accelerate daemon.
{{ macros.config_row(config_accelerate, 'accelerate_daemon_timeout', '#accelerate_daemon_timeout = 30', 0, true) }}

# If set to yes, accelerate_multi_key will allow multiple
# private keys to be uploaded to it, though each user must
# have access to the system via SSH to add a new key. The default
# is "no".
{{ macros.config_row(config_accelerate, 'accelerate_multi_key', '#accelerate_multi_key = yes', 0, true) }}
{{ macros.config(config_accelerate, [
    'accelerate_port',
    'accelerate_timeout',
    'accelerate_connect_timeout',
    'accelerate_daemon_timeout',
    'accelerate_multi_key'
]) }}
[selinux]
# file systems that require special treatment when dealing with security context
# the default behaviour that copies the existing context or uses the user default
# needs to be changed to use the file system dependent context.
{{ macros.config_row(config_selinux, 'special_context_filesystems', '#special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p', 0, true) }}

# Set this to yes to allow libvirt_lxc connections to work without SELinux.
{{ macros.config_row(config_selinux, 'libvirt_lxc_noseclabel', '#libvirt_lxc_noseclabel = yes', 0, true) }}
{{ macros.config(config_selinux, [
    'special_context_filesystems',
    'libvirt_lxc_noseclabel'
]) }}
[colors]
{{ macros.config_row(config_colors, 'highlight', '#highlight = white', 0, true) }}
{{ macros.config_row(config_colors, 'verbose', '#verbose = blue', 0, true) }}
{{ macros.config_row(config_colors, 'warn', '#warn = bright purple', 0, true) }}
{{ macros.config_row(config_colors, 'error', '#error = red', 0, true) }}
{{ macros.config_row(config_colors, 'debug', '#debug = dark gray', 0, true) }}
{{ macros.config_row(config_colors, 'deprecate', '#deprecate = purple', 0, true) }}
{{ macros.config_row(config_colors, 'skip', '#skip = cyan', 0, true) }}
{{ macros.config_row(config_colors, 'unreachable', '#unreachable = red', 0, true) }}
{{ macros.config_row(config_colors, 'ok', '#ok = green', 0, true) }}
{{ macros.config_row(config_colors, 'changed', '#changed = yellow', 0, true) }}
{{ macros.config_row(config_colors, 'diff_add', '#diff_add = green', 0, true) }}
{{ macros.config_row(config_colors, 'diff_remove', '#diff_remove = red', 0, true) }}
{{ macros.config_row(config_colors, 'diff_lines', '#diff_lines = cyan', 0, true) }}
{{ macros.config(config_colors, [
    'highlight',
    'verbose',
    'warn',
    'error',
    'debug',
    'deprecate',
    'skip',
    'unreachable',
    'ok',
    'changed',
    'diff_add',
    'diff_remove',
    'diff_lines'
]) }}

[diff]
# Always print diff when running ( same as always running with -D/--diff )
{{ macros.config_row(config_diff, 'always', '# always = no', 0, true) }}

# Set how many context lines to show in diff
{{ macros.config_row(config_diff, 'context', '# context = 3', 0, true) }}
{{ macros.config(config_diff, [
    'always',
    'context'
]) }}

{{ macros.config(config, [
  'defaults',
  'privilege_escalation',
  'paramiko_connection',
  'ssh_connection',
  'persistent_connection',
  'accelerate',
  'selinux',
  'colors',
  'diff'
]) }}
