{%- import '_macros.j2' as macros with context -%}

{% set config = manala_grafana_config -%}

{% set config_paths = [] -%}
{% set config_server = [] -%}
{% set config_database = [] -%}
{% set config_remote_cache = [] -%}
{% set config_dataproxy = [] -%}
{% set config_analytics = [] -%}
{% set config_security = [] -%}
{% set config_snapshots = [] -%}
{% set config_dashboards = [] -%}
{% set config_users = [] -%}
{% set config_auth = [] -%}
{% set config_auth_anonymous = [] -%}
{% set config_auth_github = [] -%}
{% set config_auth_google = [] -%}
{% set config_auth_generic_oauth = [] -%}
{% set config_auth_grafana_com = [] -%}
{% set config_auth_proxy = [] -%}
{% set config_auth_basic = [] -%}
{% set config_auth_ldap = [] -%}
{% set config_smtp = [] -%}
{% set config_emails = [] -%}
{% set config_log = [] -%}
{% set config_log_console = [] -%}
{% set config_log_file = [] -%}
{% set config_log_syslog = [] -%}
{% set config_alerting = [] -%}
{% set config_explore = [] -%}
{% set config_metrics = [] -%}
{% set config_metrics_graphite = [] -%}
{% set config_tracing_jaeger = [] -%}
{% set config_grafana_com = [] -%}
{% set config_external_image_storage = [] -%}
{% set config_external_image_storage_s3 = [] -%}
{% set config_external_image_storage_webdav = [] -%}
{% set config_external_image_storage_gcs = [] -%}
{% set config_external_image_storage_azure_blob = [] -%}
{% set config_external_image_storage_local = [] -%}
{% set config_rendering = [] -%}
{% set config_enterprise = [] -%}
{% set config_panels = [] -%}
{% set config_plugins = [] -%}

{%- for configs in config -%}
    {%- for config_name, config_parameters in configs.items() -%}
        {%- if config_name == 'paths' -%}
            {%- if config_paths.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'server' -%}
            {%- if config_server.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'database' -%}
            {%- if config_database.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'remote_cache' -%}
            {%- if config_remote_cache.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'dataproxy' -%}
            {%- if config_dataproxy.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'analytics' -%}
            {%- if config_analytics.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'security' -%}
            {%- if config_security.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'snapshots' -%}
            {%- if config_snapshots.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'dashboards' -%}
            {%- if config_dashboards.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'users' -%}
            {%- if config_users.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.anonymous' -%}
            {%- if config_auth_anonymous.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth' -%}
            {%- if config_auth.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.google' -%}
            {%- if config_auth_google.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.generic_oauth' -%}
            {%- if config_auth_generic_oauth.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.grafana_com' -%}
            {%- if config_auth_grafana_com.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.github' -%}
            {%- if config_auth_github.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.proxy' -%}
            {%- if config_auth_proxy.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.basic' -%}
            {%- if config_auth_basic.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.ldap' -%}
            {%- if config_auth_ldap.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'smtp' -%}
            {%- if config_smtp.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'emails' -%}
            {%- if config_emails.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'log' -%}
            {%- if config_log.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'log.console' -%}
            {%- if config_log_console.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'log.file' -%}
            {%- if config_log_file.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'log.syslog' -%}
            {%- if config_log_syslog.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'alerting' -%}
            {%- if config_alerting.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'explore' -%}
            {%- if config_explore.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'metrics' -%}
            {%- if config_metrics.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'metrics.graphite' -%}
            {%- if config_metrics_graphite.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'tracing.jaeger' -%}
            {%- if config_tracing_jaeger.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'grafana_com' -%}
            {%- if config_grafana_com.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'external_image_storage' -%}
            {%- if config_external_image_storage.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'external_image_storage.s3' -%}
            {%- if config_external_image_storage_s3.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'external_image_storage.webdav' -%}
            {%- if config_external_image_storage_webdav.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'external_image_storage.gcs' -%}
            {%- if config_external_image_storage_gcs.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'external_image_storage.azure_blob' -%}
            {%- if config_external_image_storage_azure_blob.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'external_image_storage.local' -%}
            {%- if config_external_image_storage_local.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'rendering' -%}
            {%- if config_rendering.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'enterprise' -%}
            {%- if config_enterprise.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'panels' -%}
            {%- if config_panels.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'plugins' -%}
            {%- if config_plugins.extend(config_parameters) -%}{%- endif -%}
        {%- endif -%}
    {%- endfor -%}
{%- endfor -%}


##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

# possible values : production, development
{{ macros.config_row(config, 'app_mode', ';app_mode = production', 0, true) }}

# instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
{{ macros.config_row(config, 'instance_name', ';instance_name = ${HOSTNAME}', 0, true) }}

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
{{ macros.config_row(config_paths, 'data', ';data = /var/lib/grafana', 0, true) }}

# Temporary files in `data` directory older than given duration will be removed
{{ macros.config_row(config_paths, 'temp_data_lifetime', ';temp_data_lifetime = 24h', 0, true) }}

# Directory where grafana can store logs
{{ macros.config_row(config_paths, 'logs', ';logs = /var/log/grafana', 0, true) }}

# Directory where grafana will automatically scan and look for plugins
{{ macros.config_row(config_paths, 'plugins', ';plugins = /var/lib/grafana/plugins', 0, true) }}

# folder that contains provisioning config files that grafana will apply on startup and while running.
{{ macros.config_row(config_paths, 'provisioning', ';provisioning = conf/provisioning', 0, true) }}

#################################### Server ####################################
[server]
# Protocol (http, https, socket)
{{ macros.config_row(config_server, 'protocol', ';protocol = http', 0, true) }}

# The ip address to bind to, empty will bind to all interfaces
{{ macros.config_row(config_server, 'http_addr', ';http_addr =', 0, true) }}

# The http port  to use
{{ macros.config_row(config_server, 'http_port', ';http_port = 3000', 0, true) }}

# The public facing domain name used to access grafana from a browser
{{ macros.config_row(config_server, 'domain', ';domain = localhost', 0, true) }}

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
{{ macros.config_row(config_server, 'enforce_domain', ';enforce_domain = false', 0, true) }}

# The full public facing url you use in browser, used for redirects and emails
# If you use reverse proxy and sub path specify full url (with sub path)
{{ macros.config_row(config_server, 'root_url', ';root_url = http://localhost:3000', 0, true) }}

# Log web requests
{{ macros.config_row(config_server, 'router_logging', ';router_logging = false', 0, true) }}

# the path relative working path
{{ macros.config_row(config_server, 'static_root_path', ';static_root_path = public', 0, true) }}

# enable gzip
{{ macros.config_row(config_server, 'enable_gzip', ';enable_gzip = false', 0, true) }}

# https certs & key file
{{ macros.config_row(config_server, 'cert_file', ';cert_file =', 0, true) }}
{{ macros.config_row(config_server, 'cert_key', ';cert_key =', 0, true) }}

# Unix socket path
{{ macros.config_row(config_server, 'socket', ';socket =', 0, true) }}

#################################### Database ####################################
[database]
# You can configure the database connection by specifying type, host, name, user and password
# as separate properties or as on string using the url properties.

# Either "mysql", "postgres" or "sqlite3", it's your choice
{{ macros.config_row(config_database, 'type', ';type = sqlite3', 0, true) }}
{{ macros.config_row(config_database, 'host', ';host = 127.0.0.1:3306', 0, true) }}
{{ macros.config_row(config_database, 'name', ';name = grafana', 0, true) }}
{{ macros.config_row(config_database, 'user', ';user = root', 0, true) }}
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
{{ macros.config_row(config_database, 'password', ';password =', 0, true) }}

# Use either URL or the previous fields to configure the database
# Example: mysql://user:secret@host:port/database
{{ macros.config_row(config_database, 'url', ';url =', 0, true) }}

# For "postgres" only, either "disable", "require" or "verify-full"
{{ macros.config_row(config_database, 'ssl_mode', ';ssl_mode = disable', 0, true) }}

# For "sqlite3" only, path relative to data_path setting
{{ macros.config_row(config_database, 'path', ';path = grafana.db', 0, true) }}

# Max idle conn setting default is 2
{{ macros.config_row(config_database, 'max_idle_conn', ';max_idle_conn = 2', 0, true) }}

# Max conn setting default is 0 (mean not set)
{{ macros.config_row(config_database, 'max_open_conn', ';max_open_conn =', 0, true) }}

# Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
{{ macros.config_row(config_database, 'conn_max_lifetime', ';conn_max_lifetime = 14400', 0, true) }}

# Set to true to log the sql calls and execution times.
{{ macros.config_row(config_database, 'log_queries', '') }}

# For "sqlite3" only. cache mode setting used for connecting to the database. (private, shared)
{{ macros.config_row(config_database, 'cache_mode', ';cache_mode = private', 0, true) }}

#################################### Cache server #############################
[remote_cache]
# Either "redis", "memcached" or "database" default is "database"
{{ macros.config_row(config_remote_cache, 'type', ';type = database', 0, true) }}

# cache connectionstring options
# database: will use Grafana primary database.
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# memcache: 127.0.0.1:11211
{{ macros.config_row(config_remote_cache, 'connstr', ';connstr =', 0, true) }}

#################################### Data proxy ###########################
[dataproxy]

# This enables data proxy logging, default is false
{{ macros.config_row(config_dataproxy, 'logging', ';logging = false', 0, true) }}

# How long the data proxy should wait before timing out default is 30 (seconds)
{{ macros.config_row(config_dataproxy, 'timeout', ';timeout = 30', 0, true) }}

# If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request, default is false.
{{ macros.config_row(config_dataproxy, 'send_user_header', ';send_user_header = false', 0, true) }}

#################################### Analytics ####################################
[analytics]
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
{{ macros.config_row(config_analytics, 'reporting_enabled', ';reporting_enabled = true', 0, true) }}

# Set to false to disable all checks to https://grafana.net
# for new vesions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.com to get latest versions
{{ macros.config_row(config_analytics, 'check_for_updates', ';check_for_updates = true', 0, true) }}

# Google Analytics universal tracking code, only enabled if you specify an id here
{{ macros.config_row(config_analytics, 'google_analytics_ua_id', ';google_analytics_ua_id =', 0, true) }}

# Google Tag Manager ID, only enabled if you specify an id here
{{ macros.config_row(config_analytics, 'google_tag_manager_id', ';google_tag_manager_id =', 0, true) }}

#################################### Security ####################################
[security]
# default admin user, created on startup
{{ macros.config_row(config_security, 'admin_user', ';admin_user = admin', 0, true) }}

# default admin password, can be changed before first start of grafana,  or in profile settings
{{ macros.config_row(config_security, 'admin_password', ';admin_password = admin', 0, true) }}

# used for signing
{{ macros.config_row(config_security, 'secret_key', ';secret_key = SW2YcwTIb9zpOOhoPsMm', 0, true) }}

# disable gravatar profile images
{{ macros.config_row(config_security, 'disable_gravatar', ';disable_gravatar = false', 0, true) }}

# data source proxy whitelist (ip_or_domain:port separated by spaces)
{{ macros.config_row(config_security, 'data_source_proxy_whitelist', ';data_source_proxy_whitelist =', 0, true) }}

# disable protection against brute force login attempts
{{ macros.config_row(config_security, 'disable_brute_force_login_protection', ';disable_brute_force_login_protection = false', 0, true) }}

# set to true if you host Grafana behind HTTPS. default is false.
{{ macros.config_row(config_security, 'cookie_secure', ';cookie_secure = false', 0, true) }}

# set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict" and "none"
{{ macros.config_row(config_security, 'cookie_samesite', ';cookie_samesite = lax', 0, true) }}

# set to true if you want to allow browsers to render Grafana in a <frame>, <iframe>, <embed> or <object>. default is false.
{{ macros.config_row(config_security, 'allow_embedding', ';allow_embedding = false', 0, true) }}

#################################### Snapshots ###########################
[snapshots]
# snapshot sharing options
{{ macros.config_row(config_snapshots, 'external_enabled', ';external_enabled = true', 0, true) }}
{{ macros.config_row(config_snapshots, 'external_snapshot_url', ';external_snapshot_url = https://snapshots-origin.raintank.io', 0, true) }}
{{ macros.config_row(config_snapshots, 'external_snapshot_name', ';external_snapshot_name = Publish to snapshot.raintank.io', 0, true) }}

# remove expired snapshot
{{ macros.config_row(config_snapshots, 'snapshot_remove_expired', ';snapshot_remove_expired = true', 0, true) }}

#################################### Dashboards History ##################
[dashboards]
# Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
{{ macros.config_row(config_dashboards, 'versions_to_keep', ';versions_to_keep = 20', 0, true) }}

#################################### Users ###############################
[users]
# disable user signup / registration
{{ macros.config_row(config_users, 'allow_sign_up', ';allow_sign_up = true', 0, true) }}

# Allow non admin users to create organizations
{{ macros.config_row(config_users, 'allow_org_create', ';allow_org_create = true', 0, true) }}

# Set to true to automatically assign new users to the default organization (id 1)
{{ macros.config_row(config_users, 'auto_assign_org', ';auto_assign_org = true', 0, true) }}

# Default role new users will be automatically assigned (if disabled above is set to true)
{{ macros.config_row(config_users, 'auto_assign_org_role', ';auto_assign_org_role = Viewer', 0, true) }}

# Background text for the user field on the login page
{{ macros.config_row(config_users, 'login_hint', ';login_hint = email or username', 0, true) }}
{{ macros.config_row(config_users, 'password_hint', ';password_hint = password', 0, true) }}

# Default UI theme ("dark" or "light")
{{ macros.config_row(config_users, 'default_theme', ';default_theme = dark', 0, true) }}

# External user management, these options affect the organization users view
{{ macros.config_row(config_users, 'external_manage_link_url', ';external_manage_link_url =', 0, true) }}
{{ macros.config_row(config_users, 'external_manage_link_name', ';external_manage_link_name =', 0, true) }}
{{ macros.config_row(config_users, 'external_manage_info', ';external_manage_info =', 0, true) }}

# Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
{{ macros.config_row(config_users, 'viewers_can_edit', ';viewers_can_edit = false', 0, true) }}

# Editors can administrate dashboard, folders and teams they create
{{ macros.config_row(config_users, 'editors_can_admin', ';editors_can_admin = false', 0, true) }}

[auth]
# Login cookie name
{{ macros.config_row(config_auth, 'login_cookie_name', ';login_cookie_name = grafana_session', 0, true) }}

# The lifetime (days) an authenticated user can be inactive before being required to login at next visit. Default is 7 days,
{{ macros.config_row(config_auth, 'login_maximum_inactive_lifetime_days', ';login_maximum_inactive_lifetime_days = 7', 0, true) }}

# The maximum lifetime (days) an authenticated user can be logged in since login time before being required to login. Default is 30 days.
{{ macros.config_row(config_auth, 'login_maximum_lifetime_days', ';login_maximum_lifetime_days = 30', 0, true) }}

# How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
{{ macros.config_row(config_auth, 'token_rotation_interval_minutes', ';token_rotation_interval_minutes = 10', 0, true) }}

# Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
{{ macros.config_row(config_auth, 'disable_login_form', ';disable_login_form = false', 0, true) }}

# Set to true to disable the signout link in the side menu. useful if you use auth.proxy, defaults to false
{{ macros.config_row(config_auth, 'disable_signout_menu', ';disable_signout_menu = false', 0, true) }}

# URL to redirect the user to after sign out
{{ macros.config_row(config_auth, 'signout_redirect_url', ';signout_redirect_url =', 0, true) }}

# Set to true to attempt login with OAuth automatically, skipping the login screen.
# This setting is ignored if multiple OAuth providers are configured.
{{ macros.config_row(config_auth, 'oauth_auto_login', ';oauth_auto_login = false', 0, true) }}

#################################### Anonymous Auth ######################
[auth.anonymous]
# enable anonymous access
{{ macros.config_row(config_auth_anonymous, 'enabled', ';enabled = false', 0, true) }}

# specify organization name that should be used for unauthenticated users
{{ macros.config_row(config_auth_anonymous, 'org_name', ';org_name = Main Org.', 0, true) }}

# specify role for unauthenticated users
{{ macros.config_row(config_auth_anonymous, 'org_role', ';org_role = Viewer', 0, true) }}

#################################### Github Auth ##########################
[auth.github]
{{ macros.config_row(config_auth_github, 'enabled', ';enabled = false', 0, true) }}
{{ macros.config_row(config_auth_github, 'allow_sign_up', ';allow_sign_up = true', 0, true) }}
{{ macros.config_row(config_auth_github, 'client_id', ';client_id = some_id', 0, true) }}
{{ macros.config_row(config_auth_github, 'client_secret', ';client_secret = some_secret', 0, true) }}
{{ macros.config_row(config_auth_github, 'scopes', ';scopes = user:email,read:org', 0, true) }}
{{ macros.config_row(config_auth_github, 'auth_url', ';auth_url = https://github.com/login/oauth/authorize', 0, true) }}
{{ macros.config_row(config_auth_github, 'token_url', ';token_url = https://github.com/login/oauth/access_token', 0, true) }}
{{ macros.config_row(config_auth_github, 'api_url', ';api_url = https://api.github.com/user', 0, true) }}
{{ macros.config_row(config_auth_github, 'team_ids', ';team_ids =', 0, true) }}
{{ macros.config_row(config_auth_github, 'allowed_organizations', ';allowed_organizations =', 0, true) }}

#################################### Google Auth ##########################
[auth.google]
{{ macros.config_row(config_auth_google, 'enabled', ';enabled = false', 0, true) }}
{{ macros.config_row(config_auth_google, 'allow_sign_up', ';allow_sign_up = true', 0, true) }}
{{ macros.config_row(config_auth_google, 'client_id', ';client_id = some_client_id', 0, true) }}
{{ macros.config_row(config_auth_google, 'client_secret', ';client_secret = some_client_secret', 0, true) }}
{{ macros.config_row(config_auth_google, 'scopes', ';scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email', 0, true) }}
{{ macros.config_row(config_auth_google, 'auth_url', ';auth_url = https://accounts.google.com/o/oauth2/auth', 0, true) }}
{{ macros.config_row(config_auth_google, 'token_url', ';token_url = https://accounts.google.com/o/oauth2/token', 0, true) }}
{{ macros.config_row(config_auth_google, 'api_url', ';api_url = https://www.googleapis.com/oauth2/v1/userinfo', 0, true) }}
{{ macros.config_row(config_auth_google, 'allowed_domains', ';allowed_domains =', 0, true) }}

#################################### Generic OAuth ##########################
[auth.generic_oauth]
{{ macros.config_row(config_auth_generic_oauth, 'enabled', ';enabled = false', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'name', ';name = OAuth', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'allow_sign_up', ';allow_sign_up = true', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'client_id', ';client_id = some_id', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'client_secret', ';client_secret = some_secret', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'scopes', ';scopes = user:email,read:org', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'auth_url', ';auth_url = https://foo.bar/login/oauth/authorize', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'token_url', ';token_url = https://foo.bar/login/oauth/access_token', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'api_url', ';api_url = https://foo.bar/user', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'team_ids', ';team_ids =', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'allowed_organizations', ';allowed_organizations =', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'tls_skip_verify_insecure', ';tls_skip_verify_insecure = false', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'tls_client_cert', ';tls_client_cert =', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'tls_client_key', ';tls_client_key =', 0, true) }}
{{ macros.config_row(config_auth_generic_oauth, 'tls_client_ca', ';tls_client_ca =', 0, true) }}

; Set to true to enable sending client_id and client_secret via POST body instead of Basic authentication HTTP header
; This might be required if the OAuth provider is not RFC6749 compliant, only supporting credentials passed via POST payload
{{ macros.config_row(config_auth_generic_oauth, 'send_client_credentials_via_post', ';send_client_credentials_via_post = false', 0, true) }}

#################################### Grafana.com Auth ####################
[auth.grafana_com]
{{ macros.config_row(config_auth_grafana_com, 'enabled', ';enabled = false', 0, true) }}
{{ macros.config_row(config_auth_grafana_com, 'allow_sign_up', ';allow_sign_up = true', 0, true) }}
{{ macros.config_row(config_auth_grafana_com, 'client_id', ';client_id = some_id', 0, true) }}
{{ macros.config_row(config_auth_grafana_com, 'client_secret', ';client_secret = some_secret', 0, true) }}
{{ macros.config_row(config_auth_grafana_com, 'scopes', ';scopes = user:email', 0, true) }}
{{ macros.config_row(config_auth_grafana_com, 'allowed_organizations', ';allowed_organizations =', 0, true) }}

#################################### Auth Proxy ##########################
[auth.proxy]
{{ macros.config_row(config_auth_proxy, 'enabled', ';enabled = false', 0, true) }}
{{ macros.config_row(config_auth_proxy, 'header_name', ';header_name = X-WEBAUTH-USER', 0, true) }}
{{ macros.config_row(config_auth_proxy, 'header_property', ';header_property = username', 0, true) }}
{{ macros.config_row(config_auth_proxy, 'auto_sign_up', ';auto_sign_up = true', 0, true) }}
{{ macros.config_row(config_auth_proxy, 'ldap_sync_ttl', ';ldap_sync_ttl = 60', 0, true) }}
{{ macros.config_row(config_auth_proxy, 'whitelist', ';whitelist = 192.168.1.1, 192.168.2.1', 0, true) }}
{{ macros.config_row(config_auth_proxy, 'headers', ';headers = Email:X-User-Email, Name:X-User-Name', 0, true) }}

#################################### Basic Auth ##########################
[auth.basic]
{{ macros.config_row(config_auth_basic, 'enabled', ';enabled = true', 0, true) }}

#################################### Auth LDAP ##########################
[auth.ldap]
{{ macros.config_row(config_auth_ldap, 'enabled', ';enabled = false', 0, true) }}
{{ macros.config_row(config_auth_ldap, 'config_file', ';config_file = /etc/grafana/ldap.toml', 0, true) }}
{{ macros.config_row(config_auth_ldap, 'allow_sign_up', ';allow_sign_up = true', 0, true) }}

#################################### SMTP / Emailing ##########################
[smtp]
{{ macros.config_row(config_smtp, 'enabled', ';enabled = false', 0, true) }}
{{ macros.config_row(config_smtp, 'host', ';host = localhost:25', 0, true) }}
{{ macros.config_row(config_smtp, 'user', ';user =', 0, true) }}
# If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
{{ macros.config_row(config_smtp, 'password', ';password =', 0, true) }}
{{ macros.config_row(config_smtp, 'cert_file', ';cert_file =', 0, true) }}
{{ macros.config_row(config_smtp, 'key_file', ';key_file =', 0, true) }}
{{ macros.config_row(config_smtp, 'skip_verify', ';skip_verify = false', 0, true) }}
{{ macros.config_row(config_smtp, 'from_address', ';from_address = admin@grafana.localhost', 0, true) }}
{{ macros.config_row(config_smtp, 'from_name', ';from_name = Grafana', 0, true) }}
# EHLO identity in SMTP dialog (defaults to instance_name)
{{ macros.config_row(config_smtp, 'ehlo_identity', ';ehlo_identity = dashboard.example.com', 0, true) }}

[emails]
{{ macros.config_row(config_emails, 'welcome_email_on_sign_up', ';welcome_email_on_sign_up = false', 0, true) }}

#################################### Logging ##########################
[log]
# Either "console", "file", "syslog". Default is console and  file
# Use space to separate multiple modes, e.g. "console file"
{{ macros.config_row(config_log, 'mode', ';mode = console file', 0, true) }}

# Either "debug", "info", "warn", "error", "critical", default is "info"
{{ macros.config_row(config_log, 'level', ';level = info', 0, true) }}

# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
{{ macros.config_row(config_log, 'filters', ';filters =', 0, true) }}

# For "console" mode only
[log.console]
{{ macros.config_row(config_log_console, 'level', ';level =', 0, true) }}

# log line format, valid options are text, console and json
{{ macros.config_row(config_log_console, 'format', ';format = console', 0, true) }}

# For "file" mode only
[log.file]
{{ macros.config_row(config_log_file, 'level', ';level =', 0, true) }}

# log line format, valid options are text, console and json
{{ macros.config_row(config_log_file, 'format', ';format = text', 0, true) }}

# This enables automated log rotate(switch of following options), default is true
{{ macros.config_row(config_log_file, 'log_rotate', ';log_rotate = true', 0, true) }}

# Max line number of single file, default is 1000000
{{ macros.config_row(config_log_file, 'max_lines', ';max_lines = 1000000', 0, true) }}

# Max size shift of single file, default is 28 means 1 << 28, 256MB
{{ macros.config_row(config_log_file, 'max_size_shift', ';max_size_shift = 28', 0, true) }}

# Segment log daily, default is true
{{ macros.config_row(config_log_file, 'daily_rotate', ';daily_rotate = true', 0, true) }}

# Expired days of log file(delete after max days), default is 7
{{ macros.config_row(config_log_file, 'max_days', ';max_days = 7', 0, true) }}

[log.syslog]
{{ macros.config_row(config_log_syslog, 'level', ';level =', 0, true) }}

# log line format, valid options are text, console and json
{{ macros.config_row(config_log_syslog, 'format', ';format = text', 0, true) }}

# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
{{ macros.config_row(config_log_syslog, 'network', ';network =', 0, true) }}
{{ macros.config_row(config_log_syslog, 'address', ';address =', 0, true) }}

# Syslog facility. user, daemon and local0 through local7 are valid.
{{ macros.config_row(config_log_syslog, 'facility', ';facility =', 0, true) }}

# Syslog tag. By default, the process' argv[0] is used.
{{ macros.config_row(config_log_syslog, 'tag', ';tag =', 0, true) }}

#################################### Alerting ############################
[alerting]
# Disable alerting engine & UI features
{{ macros.config_row(config_alerting, 'enabled', ';enabled = true', 0, true) }}
# Makes it possible to turn off alert rule execution but alerting UI is visible
{{ macros.config_row(config_alerting, 'execute_alerts', ';execute_alerts = true', 0, true) }}

# Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
{{ macros.config_row(config_alerting, 'error_or_timeout', ';error_or_timeout = alerting', 0, true) }}

# Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
{{ macros.config_row(config_alerting, 'nodata_or_nullvalues', ';nodata_or_nullvalues = no_data', 0, true) }}

# Alert notifications can include images, but rendering many images at the same time can overload the server
# This limit will protect the server from render overloading and make sure notifications are sent out quickly
{{ macros.config_row(config_alerting, 'concurrent_render_limit', ';concurrent_render_limit = 5', 0, true) }}


# Default setting for alert calculation timeout. Default value is 30
{{ macros.config_row(config_alerting, 'evaluation_timeout_seconds', ';evaluation_timeout_seconds = 30', 0, true) }}

# Default setting for alert notification timeout. Default value is 30
{{ macros.config_row(config_alerting, 'notification_timeout_seconds', ';notification_timeout_seconds = 30', 0, true) }}

# Default setting for max attempts to sending alert notifications. Default value is 3
{{ macros.config_row(config_alerting, 'max_attempts', ';max_attempts = 3', 0, true) }}

#################################### Explore #############################
[explore]
# Enable the Explore section
{{ macros.config_row(config_explore, 'enabled', ';enabled = true', 0, true) }}

#################################### Internal Grafana Metrics ##########################
# Metrics available at HTTP API Url /metrics
[metrics]
# Disable / Enable internal metrics
{{ macros.config_row(config_metrics, 'enabled', ';enabled           = true', 0, true) }}

# Publish interval
{{ macros.config_row(config_metrics, 'interval_seconds', ';interval_seconds  = 10', 0, true) }}

# Send internal metrics to Graphite
[metrics.graphite]
# Enable by setting the address setting (ex localhost:2003)
{{ macros.config_row(config_metrics_graphite, 'address', ';address =', 0, true) }}
{{ macros.config_row(config_metrics_graphite, 'prefix', ';prefix = prod.grafana.%(instance_name)s.', 0, true) }}

#################################### Distributed tracing ############
[tracing.jaeger]
# Enable by setting the address sending traces to jaeger (ex localhost:6831)
{{ macros.config_row(config_tracing_jaeger, 'address', ';address = localhost:6831', 0, true) }}
# Tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
{{ macros.config_row(config_tracing_jaeger, 'always_included_tag', ';always_included_tag = tag1:value1', 0, true) }}
# Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
{{ macros.config_row(config_tracing_jaeger, 'sampler_type', ';sampler_type = const', 0, true) }}
# jaeger samplerconfig param
# for "const" sampler, 0 or 1 for always false/true respectively
# for "probabilistic" sampler, a probability between 0 and 1
# for "rateLimiting" sampler, the number of spans per second
# for "remote" sampler, param is the same as for "probabilistic"
# and indicates the initial sampling rate before the actual one
# is received from the mothership
{{ macros.config_row(config_tracing_jaeger, 'sampler_param', ';sampler_param = 1', 0, true) }}

#################################### Grafana.com integration  ##########################
# Url used to import dashboards directly from Grafana.com
[grafana_com]
{{ macros.config_row(config_grafana_com, 'url', ';url = https://grafana.com', 0, true) }}

#################################### External image storage ##########################
[external_image_storage]
# Used for uploading images to public servers so they can be included in slack/email messages.
# you can choose between (s3, webdav, gcs, azure_blob, local)
{{ macros.config_row(config_external_image_storage, 'provider', ';provider =', 0, true) }}

[external_image_storage.s3]
{{ macros.config_row(config_external_image_storage_s3, 'bucket', ';bucket =', 0, true) }}
{{ macros.config_row(config_external_image_storage_s3, 'region', ';region =', 0, true) }}
{{ macros.config_row(config_external_image_storage_s3, 'path', ';path =', 0, true) }}
{{ macros.config_row(config_external_image_storage_s3, 'access_key', ';access_key =', 0, true) }}
{{ macros.config_row(config_external_image_storage_s3, 'secret_key', ';secret_key =', 0, true) }}

[external_image_storage.webdav]
{{ macros.config_row(config_external_image_storage_webdav, 'url', ';url =', 0, true) }}
{{ macros.config_row(config_external_image_storage_webdav, 'public_url', ';public_url =', 0, true) }}
{{ macros.config_row(config_external_image_storage_webdav, 'username', ';username =', 0, true) }}
{{ macros.config_row(config_external_image_storage_webdav, 'password', ';password =', 0, true) }}

[external_image_storage.gcs]
{{ macros.config_row(config_external_image_storage_gcs, 'key_file', ';key_file =', 0, true) }}
{{ macros.config_row(config_external_image_storage_gcs, 'bucket', ';bucket =', 0, true) }}
{{ macros.config_row(config_external_image_storage_gcs, 'path', ';path =', 0, true) }}

[external_image_storage.azure_blob]
{{ macros.config_row(config_external_image_storage_azure_blob, 'account_name', ';account_name =', 0, true) }}
{{ macros.config_row(config_external_image_storage_azure_blob, 'account_key', ';account_key =', 0, true) }}
{{ macros.config_row(config_external_image_storage_azure_blob, 'container_name', ';container_name =', 0, true) }}

[external_image_storage.local]
# does not require any configuration

[rendering]
# Options to configure external image rendering server like https://github.com/grafana/grafana-image-renderer
{{ macros.config_row(config_rendering, 'server_url', ';server_url =', 0, true) }}
{{ macros.config_row(config_rendering, 'callback_url', ';callback_url =', 0, true) }}

[enterprise]
# Path to a valid Grafana Enterprise license.jwt file
{{ macros.config_row(config_enterprise, 'license_path', ';license_path =', 0, true) }}

[panels]
# If set to true Grafana will allow script tags in text panels. Not recommended as it enable XSS vulnerabilities.
{{ macros.config_row(config_panels, 'disable_sanitize_html', ';disable_sanitize_html = false', 0, true) }}

[plugins]
{{ macros.config_row(config_plugins, 'enable_alpha', ';enable_alpha = false', 0, true) }}
{{ macros.config_row(config_plugins, 'app_tls_skip_verify_insecure', ';app_tls_skip_verify_insecure = false', 0, true) }}
